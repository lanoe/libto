4.6.4 - 2018-07-18
- TLS helper: Fix random behaviour due to undefined variable

4.6.3 - 2018-07-18
- LoRa standard API is now disabled by default
- Revert "NVM API is now disabled by default"
- Fingerprint is now disabled by default

4.6.2 - 2018-07-12
- TLS helper: Fallback on TO_tls_get_certificate if TO_helper_tls_get_certificate fails (probably undefined)

4.6.1 - 2018-07-11
- Fix crash during TLS handshake (DTLS disabled)
- examples: Fix recvfrom EINVAL return in TLS handshake
- doc: Add some missing parts about TLS helper APIs

4.6.0 - 2018-07-04
- TLS helper: Use IO buffer for data receive
- Add wrapper for Arduino
- Fix configuration file
- TLS Optimized: Add get Certificate CAPI
- TLS helper: Add buffer overflow protections
- TLS helper: Use get Certificate CAPI
- TLS helper: Adapt updates sizes to IO buffer size
- Include TO_cfg.h in TO_defs.h (avoid issues if TO_defs.h is included first)
- TLS helper: More buffer overflow checks
- Remove usage of ssize_t/size_t (size is architecture dependant)
- TLS helper: Add TO_helper_tls_receive_message_with_timeout
- TLS helper: DTLS retransmission now disableable
- TO_helper_tls_unsecure_message: Always send updates aligned to AES block size
- NVM API is now disabled by default

4.5.2 - 2018-05-17
- doc: Update to new defines name (add it to migration doc)

4.5.1 - 2018-05-14
- TLS Optimized: Fix define name

4.5.0 - 2018-05-14
- TLS helper: Support session resumption
- TLS helper: Send close notify alert in case of error
- TLS Optimized: New command to reset session
- TLS helper: Use cache for application data
- TLS Optimized: Add secure/unsecure message CAPIs
- TLS helper: Use secure/unsecure message CAPIs

4.4.0 - 2018-04-19
- Add include/TO_cfg.h header to manage library settings otherwise than with
project preprocessor definitions
- LoRa and TLS are now enabled by default
(read migration guide 4.3.x -> 4.4.x)

4.3.4 - 2018-04-10
- Add post-command hook
- Add verify_chain_ca_certificate_and_store CAPI & helper
- Rename CAPI helper

4.3.3 - 2018-03-29
- Add verify_chain_certificate_and_store_init/update/final()
- Add verify_chain_certificate_and_store() helper
- Status PIO documentation detailed
- Add pre-command hook

4.3.1 - 2018-03-20
- Commands to manage status PIO config: TO_set_status_PIO_config() and
TO_get_status_PIO_config
- Library hook just after writing command and before reading response
- Doc: power optimization guide
- Mbed wrapper: Power up before init, and misc. fixes
- STM32 wrapper: Extend compatibility, and standard Arduino pins by default
- RPi wrapper: fix intermittent bad last command duration

4.3.0 - 2018-03-08
- mbed wrapper: Control D2 PIO
- TLS helper: Provide a step API
- TLS helper: regroup static variables in a context
- Use secure messaging in ECIES example
- TLS helper: Remove useless caches (use pointer instead)
- TLS helper: Buffers sizes by define
- TLS helper: Handle alerts
- mbed wrapper: Handle I2C timeouts for MCUXpresso_MCUS targets (NXP)
- TLS Optimized: Support one-way authentication
- mbed wrapper: Fix timeout for STM platforms

4.2.8 - 2018-02-23
- Doc: misc. distribution changes
- TLS example fix for parsing stdout
- Python shell: run_cmd now supports sessions
- Python shell: add version to hello message

4.2.7 - 2018-02-16
- Doc: clarification for last command duration
- Add missing TLS options in config.py
- Mbed wrapper: directly use STM HAL synchronous API with timeouts for mbed OS
on STM platforms

4.2.6 - 2018-02-12
- Update mbedOS wrapper
- Wrapper: Add TO_data_last_command_duration() API
- Wrapper: provide TO_data_last_command_duration() for raspberry and net_bridge
- Allow to not have net bridge configuration file (with environment variables)
- Wrapper: net_bridge: update protocol version for last command duration

4.2.5 - 2018-01-30
- ECIES example improved

4.2.4 - 2018-01-22
- Add ECIES example
- Possibility to use TO_stdint.h if stdint.h is not available on the target
platform (see doc about define HAVE_NO_STDINT_H)
- Now using secure_memcmp(), secure_memcpy(), secure_memmove(), and
secure_memset()
- Network bridge I2C wrapper: ability to take port from environment variable

4.2.3 - 2018-01-12
- Add short to TO_verify_certificate_and_store() compatible formats
- Add TO_verify_ca_certificate_and_store()
- Add TO_get_nvm_size() to know available client NVM SE space

4.2.2 - 2017-12-08
- Remove TO_compute_ecdh

4.2.1 - 2017-12-08
- Fix missing import
- Fix TLS helper with DTLS

4.2.0 - 2017-12-08
- TLS handshake: Force ECC keys renewal before handshake
- TLS Optimized: Add length output parameter to TO_tls_get_certificate

4.1.4 - 2017-12-05
- Add x509 dedicated get functions
- Shell: persistent session option, to avoid shutting of SE power on each
command
- Logs are now enabled by defining TO_DEBUG

4.1.3 - 2017-11-16
- Secure link: fix context desynchronisation in case of communication error

4.1.2 - 2017-10-27
- Disable unused seclink code to prevent build errors
- Change secure link internal callbacks names to avoid conflicts
- Secure link: minor changes related to keys renewal

4.1.1 - 2017-10-10
- Documentation size optimized

4.1.0 - 2017-10-05
- TLS optimized
- DTLS
- Renamed main.c/h to core.c/h
- Endianness runtime detection fallback if not explicitely defined

4.0.5 - 2017-09-28
- Secure link keys renewal mechanism for ARC4 and AES/HMAC protocols
- Secure link example for keys renewal handling from client application code

4.0.4 - 2017-09-25
- Fixes for Windows build

4.0.3 - 2017-09-22
- C++ APIs compatibility
- Wrapper: STM32F4xx using ST HAL, provided by ZHAW university
- Net bridge TLS support

4.0.2 - 2017-08-24
- Wrapper: net_bridge: fixed protocol status usage
- Doc minor changes

4.0.1 - 2017-08-17
- Doc: LoRa application notes
- Doc: PDF Trusted Objects Latex style

4.0.0 - 2017-07-21
- Doc: HTML / PDF generator based on Doxygen and Sphinx
- Library refactor (TO136 => TO, files reorganization...)
- Improved error handling
- Better built features configurability

3.0.9 - 2017-06-27
- AES/HMAC Secure Link based on external Tinycrypt library
- Secure Links: new API to compute command and response length

3.0.7 - 2017-06-15
- Secure Link mechanism
- ARC4 Secure Link support

3.0.6 - 2017-06-01
- Endianness support, documentation in doc/install/endianness.txt
- CP2112 wrapper LEDs support for Windows

3.0.5 - 2017-05-10
- Add read/write NVM helpers
- LoRa: Fix bad TO136_lora_encrypt_payload parameter
- LoRa: Add optimized helpers.
- Handle host endianess
- _send_command: Try to read response in case of write failure

3.0.3 - 2017-05-05
- Linux generic I2C wrapper

3.0.2 - 2017-05-04
- Support SHA256 init/update/final APIs

3.0.1 - 2017-04-26
- Add compute_ecdh() functio

3.0.0 - 2017-04-05
- changed library name from libto136_client to libto136

2.1.16 - 2017-03-29
- to136_i2c_wrapper.h now depends on to136_defs.h instead of to136.h

2.1.15 - 2017-03-28
- Python utils: fixed to136_config function call

2.1.14 - 2017-03-16
- LoRa: add TO136_lora_set_app_eui method
- CP2112 linux wrapper: add kernel module patch for rx/tx led blink

2.1.13 - 2017-02-16
- Intruducing helpers: ECIES sequence

2.1.12 - 2017-02-11
- Network I2C wrapper now supports Windows
- Wrapper: raspberrypi power GPIO is now controlled on GND to avoid TO136 to
take power on I2C while powered off
- Doc: RaspberryPi installation instructions
- Wrapper TO136_data_config() function applies configuration and now must ensure
it is taken into account

2.1.11 - 2017-02-08
- Add TLS API

2.1.10 - 2017-02-08
- Network bridge wrapper: protocol finalization, read config file to get bridge
address

2.1.8 - 2017-02-07
- LoRa bugfix on TO136_lora_compute_shared_keys()
- Wrapper API: added optional TO136_data_config() function, to give I2C
settings to the wrapper, added it also into library headers and Python tools
- Add network wrapper to use I2C device through a remote I2C proxy
(experimental)

2.1.7 - 2017-01-31
- Improved debug logs

2.1.6 - 2017-01-06
- Headers: fix definition bug of TO136_restore_sld

2.1.5 - 2017-01-05
- Pyutils: made methods.py more generic to be usable by other libraries
- Verify certificate and store: fixed supported certificates types
- Headers: move some declarations from to136.h to to136_defs.h, certificates
format details, TO136_read/write() documentation
- Doc: wrapper generalities, Windows MSYS2 installation test details, CP2112
Linux patch update

2.1.4 - 2016-12-21
- Wrapper CP2112 Windows: cosmetic
- Doc: wrapper implementation guidelines: timeouts

2.1.3 - 2016-12-20
- fix raw_cmd (length was invalid)

2.1.2 - 2016-12-20
- to136sh.py: now support newline/CR in raw_cmd
- cp2112-win: add reset on cp2112 open

2.1.1 - 2016-12-20
- Shell: allow raw commands with spaces

2.1.0 - 2016-12-19
- Add get_key_fingerprint() API

2.0.0 - 2016-12-19
- Changed secure/unsecure_message API to have an explicit Initial Vector
argument
- ECIES remote public key and TO136 public key signatures made optional (enabled
by default)
- Documentation global revision and reorganization

1.5.0 - 2016-12-6
- API: compute/verify hmac init/update/final
- Removed useless lengths from API
- API: aes_iv_encrypt()
- Shell: add raw_cmd to send and recieve command and data bytes directly from
TO136

1.4.5 - 2016-11-29
- Autotools: support for MSYS2 build

1.4.4 - 2016-11-25
- Autotools: installing headers into /usr/include/trusted-objects
- Doc: installation details

1.4.3 - 2016-11-15
- Fixes for Windows support

1.4.2 - 2016-11-14
- Windows port, based on CP2112 adapter

1.4.1 - 2016-10-27
- Add sign_hash and verify_hash_signature APIs
- Tools: to136_set_remote_pubkey: removed useless public key display
- Tools: to136_set_remote_pubkey now renews shared keys and prints out public
key
- Wrapper: cp2112: use udev to discover devices, set sysfs driver settings,
documented udev rules

1.4.0 - 2016-10-21
- Memory optimizations: no malloc, less copies, smaller memory usage
- Reworked _send_command data returns
- Wrapper: cp2112: support for more than 61 bytes writes
- API: add TO136_verify()
- Python utils to use libto136, and tools (to136 shell)
- Doc: Linux installation instructions

1.3.1 - 2016-10-10
- Doc: wrapper integration

1.3.0 - 2016-10-03
- Now using autotools for Unix systems
- API to restore SLD

1.2 - 2016-09-28
- Renamed to136 API to to136
- Doc update

1.1 - 2016-09-28
- CP2112 I2C wrapper
- Doc: wrapper HOWTO

1.0 - 2016-09-07
- First release
